// font.scad
//
// Part of the StoneAgeLib
//
// Version 2
// December 31, 2024
// By: Stone Age Sculptor
// License: CC0 (Public Domain)
// Font shape data and code to show a text with it.
//
// Version 3
// February 3, 2025
// By: Stone Age Sculptor
// License: CC0 (Public Domain)
//   Multiple fonts.
//   Adjustments to character shapes.
//
// This version number is the overall version for everything in this file.
// Some modules and functions in this file may have their own version.


include <interpolate.scad>

// ==============================================================
//
// text_subdivision
// ----------------
//
// Character range:
//   If the character can be found in the table,
//   then it is printed. It could be a normal character
//   or a UTF-8 character, they are handled in the
//   same way.
//
// Escape sequence:
//   The normal escape sequences that the
//   OpenSCAD scripts supports can be used in the string.
//   For example \"
//
// Control characters:
//   \n : next line
//   \t : go to the next 50 step on the x-axis.
//
// To do: Implement the 'size'.
//
module text_subdivision(text,t,size=10,font="Subdivision Font",weight=1,slanting=0,halign="left",valign="baseline",spacing=1,line_spacing=3,method="1path",smooth=2,index=0,xoffset=0,yoffset=0)
{
  // Print the characters according to the width.
  // Only one character is printed. This function is
  // called recursively for the next character.

  // The preferred parameter name is 'text',
  // but 't' can be used as well.
  stringcommon = is_undef(t)    ? "" : t;
  string       = is_undef(text) ? stringcommon : text;

  // I think that a default spacing of 3 is okay.
  char_spacing = 3 * spacing;
  

  // Find the font of the name.
  // To do: make assert() when font name is not found.
  for(i=[0:len(font_list)-1])
  {
    if(font_list[i][0] == font)
    {
      // Concatenate the default font after the current font.
      // Then it automatically falls back to the default font.
      font_definition = concat(font_list[i][1],font_list[0][1]);
      
      if(index < len(string))
      {
        // If the character was not found, then the index 0 is used.
        char = string[index];
        dataindex = GetFontIndex(font_definition,char);
        width = font_definition[dataindex][1];
        points = font_definition[dataindex][2];
        newline = (char == "\n");
        tab = (char == "\t");

        // Adjust alignment
        xoffset_aligned = (halign == "center") ? xoffset - width/2 : xoffset;

        // are there any points and is it printable ?
        if(len(points) > 0 && !newline &&!tab)
        {
          // This render over the iterations reduces the number
          // of triangles in the 2D resulting shape.
          render()
          {
            for(i=[0:len(points)-1])
            {
              path = Subdivision(points[i],divisions=smooth,method=method);
              translate([xoffset_aligned,yoffset])
              {
                if(len(path) == 1)
                {
                  // Not hull over two points, but a single point
                  y = path[0].y;
                  x = path[0].x + slanting * y;
                  translate([x,y])
                    circle(d=weight,$fn=20);
                }
                else
                {
                  for(j=[0:len(path)-2])
                  {
                    y1 = path[j].y;
                    x1 = path[j].x + slanting * y1;
                    y2 = path[j+1].y;
                    x2 = path[j+1].x + slanting * y2;

                    hull()
                    {
                      translate([x1,y1])
                        circle(d=weight,$fn=20);
                      translate([x2,y2])
                        circle(d=weight,$fn=20);
                    }
                  }
                }
              }
            }
          }
        }
        
        // Solve the extras for a new line or a tab.
        tabposition  = 50*floor((xoffset + 50) / 50);
        charposition = xoffset+font_definition[dataindex][1]+char_spacing;
        new_xoffset1 = newline ? 0 : charposition;
        new_xoffset2 = tab     ? tabposition : new_xoffset1; 
        new_yoffset  = newline ? yoffset - 10 - line_spacing : yoffset;

        // Call this function recursively for the next character
        text_subdivision(text=string,size=size,font=font,
                         weight=weight,slanting=slanting,
                         halign=halign,valign=valign,
                         spacing=spacing,line_spacing=line_spacing,
                         method=method,smooth=smooth,
                         index=index+1,xoffset=new_xoffset2,yoffset=new_yoffset);
      }
    }
  }
}


// GetFontIndex
// ------------
// Helper function to find the character data.
// If the character was not found, then the index 0 is used.
function GetFontIndex(font_definition,char) = 
  let(found = search(char,font_definition,1,0))
  len(found) > 0 ? found[0] : 0;


// Font data
// ---------
// Each character can consist of multiple curves.
// The size is about 10 high.
//
// Font data:
//   Name of the font
//   The character
//   the width
//   a list of curves
//
// A character that is not in the list, is printed
// as the block from the first character.

subdivision_font =
[
  "Subdivision Font",
  [
    [chr(127),8,[[[0,0],[0,10]],[[0,10],[8,10]],[[8,10],[8,0]],[[8,0],[0,0]]]],
    ["a",5,[[[0.5,6.5],[2,7],[4.5,6],[4,0.5],[5,0]],[[4.05,4],[0,4.5],[0,0],[4.2,1]]]],
    ["á",5,[[[0.5,6.5],[2,7],[4.5,6],[4,0.5],[5,0]],[[4.05,4],[0,4.5],[0,0],[4.2,1]],[[2.5,8.8],[4,10]]]],
    ["à",5,[[[0.5,6.5],[2,7],[4.5,6],[4,0.5],[5,0]],[[4.05,4],[0,4.5],[0,0],[4.2,1]],[[2.6,8.8],[1.3,10]]]],
    ["ä",5,[[[0.5,6.5],[2,7],[4.5,6],[4,0.5],[5,0]],[[4.05,4],[0,4.5],[0,0],[4.2,1]],[[1.4,9]],[[3.6,9]]]],
    ["b",5,[[[0,0],[0.5,0.5],[0.5,10]],[[0.5,6.5],[5,7],[5,0],[0.3,0.5]]]],
    ["c",5,[[[5,6.5],[0,7],[0,0],[5,0.5]]]],
    ["ç",5,[[[5,7],[0,7.5],[0,2],[5,2.5]],[[3.3,2],[3.3,0],[1.6,0]]]],
    ["d",5,[[[5,0],[4.5,0.5],[4.5,10]],[[4.5,6.5],[0,7],[0,0],[4.5,0.5]]]],
    ["e",5,[[[5,1],[4,0],[0,0],[0,7],[4.6,7],[5,3.5]],[[5,3.5],[0.3,3.5]]]],
    ["é",5,[[[5,1],[4,0],[0,0],[0,7],[4.6,7],[5,3.5]],[[5,3.5],[0.3,3.5]],[[2.5,8.8],[4,10]]]],
    ["è",5,[[[5,1],[4,0],[0,0],[0,7],[4.6,7],[5,3.5]],[[5,3.5],[0.3,3.5]],[[2.6,8.8],[1.3,10]]]],
    ["ë",5,[[[5,1],[4,0],[0,0],[0,7],[4.6,7],[5,3.5],[5,3.5],[0.3,3.5]],[[1.4,9]],[[3.6,9]]]],
    ["ê",5,[[[5,1],[4,0],[0,0],[0,7],[4.6,7],[5,3.5],[5,3.5],[0.3,3.5]],[[1.2,8.6],[2.5,10],[3.8,8.6]]]],
    ["f",5,[[[2,0],[2,10],[5,10]],[[0,7],[4,7]]]],
    ["g",5,[[[5,7],[5,0],[1,0]],[[4.95,6],[4,7],[0,7],[0,2.5],[4,2.5],[4.8,3.5]]]],
    ["h",5,[[[0,0],[0,5],[0,10]],[[0,5],[5,7],[5,0]]]],
    ["i",1,[[[0.5,0],[0.5,7]],[[0.5,10]]]],
    ["ï",2.4,[[[1.2,0],[1.2,7]],[[0,9]],[[2.4,9]]]],
    ["j",2,[[[0,0],[2,0],[2,7]],[[2,10]]]],
    ["k",5,[[[0,10],[0,0]],[[5,7],[0,3.5]],[[0,3.5],[5,0]]]],
    ["l",3,[[[0,10],[0,0.2],[3,0]]]],
    ["m",8,[[[0,0],[0,7]],[[0,6],[1,7],[3,7],[4,6],[4,0]],[[3.85,6],[5,7],[7,7],[8,6],[8,0]]]],
    ["n",5,[[[0,0],[0,7]],[[0,6],[2,7],[5,7],[5,0]]]],
    ["ñ",5,[[[0,0],[0,7]],[[0,6],[2,7],[5,7],[5,0]],[[0.5,9.1],[1.75,10],[3.2,8.8],[4.5,9.4]]]],
    ["o",5,[[[2.5,0],[0,0.4],[0,7],[5,7],[5,0.4],[2.5,0]]]],
    ["ö",5,[[[2.5,0],[0,0.4],[0,7],[5,7],[5,0.4],[2.5,0]],[[1.4,9]],[[3.6,9]]]],
    ["p",5,[[[0,0],[0,7]],[[0,6.5],[5,7],[5,2.5],[0,3]]]],
    ["q",5,[[[5,0],[5,7]],[[5,6.5],[0,7],[0,2.5],[5,3]]]],
    ["r",4,[[[0,0],[0,7]],[[0,5],[2,7],[4,7]]]],
    ["s",5,[[[5,7],[0,7],[0,3.5],[5,3.5],[5,0],[0,0]]]],
    ["t",4.5,[[[0,7],[4,7]],[[2,10],[2,1],[3,0],[4.5,0]]]],
    ["u",5,[[[0,7],[0,0],[3.6,0],[5,1.6]],[[5,7],[5,0]]]],
    ["ü",5,[[[0,7],[0,0],[3.6,0],[5,1.6]],[[5,7],[5,0]],[[1.4,9]],[[3.6,9]]]],
    ["v",6,[[[0,7],[3,0]],[[3,0],[6,7]]]],
    ["w",9,[[[0,7],[2.25,0]],[[2.25,0],[4.5,7]],[[4.5,7],[6.75,0]],[[6.75,0],[9,7]]]],
    ["x",5,[[[0,7],[5,0]],[[0,0],[5,7]]]],
    ["y",5,[[[0,7],[1.5,4.3],[2.9,3]],[[5,7],[2,1],[0.5,0]]]],
    ["ĳ",5,[[[0,0],[0,7]],[[0,10]],[[3,0],[5,0],[5,7]],[[5,10]]]],
    ["z",5,[[[0,7],[5,7]],[[5,7],[0,0]],[[0,0],[5,0]]]],
    ["A",8,[[[0,0],[4,10]],[[4,10],[8,0]],[[1.4,3.4],[6.6,3.4]]]],
    ["B",6,[[[0,0],[0,10]],[[0,10],[5,10],[5,5],[0,5]],[[0,5],[6,5],[6,0],[0,0]]]],
    ["C",6,[[[6,0],[0,0],[0,10],[6,10]]]],
    ["D",6,[[[0,0],[0,10]],[[0,10],[6,10],[6,0],[0,0]]]],
    ["E",6,[[[0,0],[0,10]],[[0,10],[6,10]],[[0,5],[5,5]],[[0,0],[6,0]]]],
    ["F",6,[[[0,0],[0,10]],[[0,10],[6,10]],[[0,5],[5,5]]]],
    ["G",8,[[[7,8],[6,10],[0,10],[0,0],[6,0],[7,4]],[[5,4],[8,4]]]],
    ["H",6,[[[0,0],[0,10]],[[6,0],[6,10]],[[0,5],[6,5]]]],
    ["I",2,[[[1,0],[1,10]],[[0,10],[2,10]],[[0,0],[2,0]]]],
    ["J",6,[[[6,10],[6,2],[5,0],[1,0],[0,2]]]],
    ["K",6,[[[0,0],[0,10]],[[0,5],[6,10]],[[0,5],[6,0]]]],
    ["L",6,[[[0,10],[0,0]],[[0,0],[6,0]]]],
    ["M",8,[[[0,0],[0,10]],[[0,10],[4,5]],[[4,5],[8,10]],[[8,10],[8,0]]]],
    ["N",6,[[[0,0],[0,10]],[[0,8],[1,10],[5,10],[6,8],[6,0]]]],
    ["O",7,[[[3.5,0],[1.5,0],[0,2],[0,8],[1.5,10],[5.5,10],[7,8],[7,2],[5.5,0],[3.5,0]]]],
    ["P",6,[[[0,0],[0,10]],[[0,10],[6,10],[6,5],[0,5]]]],
    ["Q",8,[[[4,1],[0,1.6],[0,10],[8,10],[8,1.6],[4,1]],[[3,2.6],[5,0],[8,0]]]],
    ["R",6,[[[0,0],[0,10]],[[0,10],[6,10],[6,5],[0,5]],[[0,5],[6,0]]]],
    ["S",7,[[[7,9],[6,10],[0,10],[0,5],[7,5],[7,0],[1,0],[0,1]]]],
    ["T",7,[[[0,10],[7,10]],[[3.5,10],[3.5,0]]]],
    ["U",7,[[[0,10],[0,1.5],[1.5,0],[5.5,0],[7,1.5]],[[7,0],[7,10]]]],
    ["V",8,[[[0,10],[4,0]],[[4,0],[8,10]]]],
    ["W",10,[[[0,10],[2.5,0]],[[2.5,0],[5,6]],[[5,6],[7.5,0]],[[7.5,0],[10,10]]]],
    ["X",7,[[[0,10],[7,0]],[[0,0],[7,10]]]],
    ["Y",7,[[[0,10],[3.5,5]],[[3.5,5],[7,10]],[[3.5,5],[3.5,0]]]],
    ["Z",7,[[[0,10],[7,10]],[[7,10],[0,0]],[[0,0],[7,0]]]],
    ["0",7,[[[3.5,0],[2,0.2],[0,3],[0,7],[2,10],[5,10],[7,7],[7,3],[5,0.2],[3.5,0]]]],
    ["1",2.5,[[[1.5,0],[1.5,10]],[[0.5,0],[2.5,0]],[[1.5,10],[0,8.5]]]],
    ["2",6,[[[0,8.7],[1.2,10],[6,10],[6,6],[3,3],[0,0]],[[0,0],[6,0]]]],
    ["3",6,[[[0,10],[6,10]],[[6,10],[2,5.5]],[[2,5.5],[6,5.5],[6,0],[1,0],[0,1]]]],
    ["4",7,[[[7,4],[0,4]],[[0,4],[5,10]],[[5,10],[5,0]]]],
    ["5",6,[[[5.2,10],[0,10]],[[0,10],[0,5.5]],[[0,5.5],[6,5.5],[6,0],[0,0]]]],
    ["6",6,[[[4,10],[1,7],[0,5],[0,0],[6,0],[6,6],[0,6],[0.1,3.5]]]],
    ["7",6,[[[0,10],[6,10]],[[6,10],[2,0]]]],
    ["8",7,[[[3.5,5],[0.5,5.4],[0.5,10],[6.5,10],[6.5,5.4],[3.5,5]],[[3.5,5],[0,4.6],[0,0],[7,0],[7,4.6],[3.5,5]]]],
    ["9",6,[[[2,0],[3.5,1.2],[6,5],[6,10],[0,10],[0,5],[4.6,5],[5.6,6]]]],
    [" ",7,[]], // a space
    [".",1,[[[0.5,0],[0.02,0.05],[0,1],[1,1],[0.98,0.05],[0.5,0]]]],
    [",",1,[[[0.5,1],[0,1],[0,2],[1,2],[1,1],[0.5,0]]]],
    ["!",1,[[[0.5,0],[0,0],[0,1],[1,1],[1,0],[0.5,0]],[[0.5,10],[0.5,3]]]],
    ["=",6,[[[0,6.5],[6,6.5]],[[0,3.5],[6,3.5]]]],
    ["+",6,[[[0,5],[6,5]],[[3,8.5],[3,1.5]]]],
    ["-",6,[[[0,5],[6,5]]]],
    ["_",7,[[[0,0],[7,0]]]],
    [":",2,[[[1,2.5],[0.5,2.9],[1,3.5],[1.5,2.9],[1,2.5]],[[1,6],[0.5,6.4],[1,7],[1.5,6.4],[1,6]]]],
    ["*",6,[[[0,5],[6,5]],[[3,8],[3,2]],[[1,7],[5,3]],[[5,7],[1,3]]]],
    ["(",4,[[[4,10],[0,8],[0,2],[4,0]]]],
    [")",4,[[[0,10],[4,8],[4,2],[0,0]]]],
    ["%",9,[[[2,10],[0.5,9.8],[0.5,7],[3.5,7],[3.5,9.8],[2,10]],[[2,0],[7,10]],[[7,3],[5.5,2.8],[5.5,0],[8.5,0],[8.5,2.8],[7,3]]]],
    ["‰",14,[[[2,10],[0.5,9.8],[0.5,7],[3.5,7],[3.5,9.8],[2,10]],[[2,0],[7,10]],[[7,3],[5.5,2.8],[5.5,0],[8.5,0],[8.5,2.8],[7,3]],[[12,3],[10.5,2.8],[10.5,0],[13.5,0],[13.5,2.8],[12,3]]]],
    ["‱",19,[[[2,10],[0.5,9.8],[0.5,7],[3.5,7],[3.5,9.8],[2,10]],[[2,0],[7,10]],[[7,3],[5.5,2.8],[5.5,0],[8.5,0],[8.5,2.8],[7,3]],[[12,3],[10.5,2.8],[10.5,0],[13.5,0],[13.5,2.8],[12,3]],[[17,3],[15.5,2.8],[15.5,0],[18.5,0],[18.5,2.8],[17,3]]]],
    ["^",4,[[[0,8],[2,10]],[[2,10],[4,8]]]],
    ["&",7,[[[7,0],[1,6],[1,10],[5.5,10],[5.5,6],[0,4],[0,0],[4,0],[7,3]]]],
    ["{",6,[[[6,10],[3,10],[3,6],[0,5],[0,5],[3,4],[3,0],[6,0]]]],
    ["}",6,[[[0,10],[3,10],[3,6],[6,5],[6,5],[3,4],[3,0],[0,0]]]],
    ["|",1,[[[0.5,0],[0.5,10]]]],
    ["[",3,[[[3,10],[0,10]],[[0,10],[0,0]],[[0,0],[3,0]]]],
    ["]",3,[[[0,10],[3,10]],[[3,10],[3,0]],[[3,0],[0,0]]]],
    ["/",5,[[[0,0],[5,10]]]],
    ["\\",5,[[[0,10],[5,0]]]],
    [">",6,[[[0,8],[6,5]],[[6,5],[0,2]]]],
    ["≥",6,[[[0,9],[6,6]],[[6,6],[0,3]],[[0,0.6],[6,0.6]]]],
    ["<",6,[[[6,8],[0,5]],[[0,5],[6,2]]]],
    ["≤",6,[[[6,9],[0,6]],[[0,6],[6,3]],[[0,0.6],[6,0.6]]]],
    ["?",6,[[[0,8],[1,10],[5,10],[6,7],[3,5],[3,3]],[[3,0],[2.5,0.4],[3,1],[3.5,0.4],[3,0]]]],
    ["~",4.5,[[[0,4.5],[1.5,6],[3,4],[4.5,5.5]]]],
    [";",1,[[[0.5,1],[0,1],[0,2],[1,2],[1,1],[0.5,0]],[[0.5,6],[0,6],[0,7],[1,7],[1,6],[0.5,6]]]],
    ["≠",7,[[[0,6.5],[7,6.5]],[[0,3.5],[7,3.5]],[[0.5,1],[6.5,9]]]],
    ["≈",6,[[[0,6.5],[1.5,7.5],[3,6.5],[4.5,5.5],[6,6.5]],[[0,3.5],[1.5,4.5],[3,3.5],[4.5,2.5],[6,3.5]]]],
    ["∆",6,[[[0,0],[3,9]],[[3,9],[6,0]],[[6,0],[0,0]]]],
    ["@",8,[[[5.3,3.6],[2.6,3],[2.6,7],[5.2,6.5]],[[5.3,7],[5,2],[8,2],[8,10],[0,10],[0,0],[8,0]]]],
    ["#",8,[[[0,3],[8,3]],[[0,7],[8,7]],[[1.5,0],[2.5,10]],[[5.5,0],[6.5,10]]]],
    ["\"",3,[[[0,10],[0,7]],[[3,10],[3,7]]]],
    ["“",5,[[[2,10],[0,8.5],[0.5,6.5],[1.5,7],[1.5,7.5],[1,7.5]],[[5,10],[3,8.5],[3.5,6.5],[4.5,7],[4.5,7.5],[4,7.5]]]],
    ["”",5,[[[0,6.5],[2,8],[1.5,10],[0.5,9.5],[0.5,8.5],[1,8.5]],[[3,6.5],[5,8],[4.5,10],[3.5,9.5],[3.5,8.5],[4,8.5]]]],
    ["\'",1,[[[0,10],[0,7]]]],
    ["`",2,[[[0,10],[2,8]]]],
    ["°",4,[[[2,10],[0.5,9.8],[0.5,7],[3.5,7],[3.5,9.8],[2,10]]]],
    ["÷",6,[[[0,5],[6,5]],[[3,1.5],[2.5,2],[3,2.5],[3.5,2],[3,1.5]],[[3,7.5],[2.5,8],[3,8.5],[3.5,8],[3,7.5]]]],
    ["♥",10,[[[5,0],[3,3],[0,5.2],[0,10],[4.4,10],[5,7]],[[5,7],[5.6,10],[10,10],[10,5.2],[7,3],[5,0]]]],
    ["$",7,[[[7,9],[0,9],[0,5],[7,5],[7,1],[0,1]],[[2.5,10],[2.5,0]],[[4.5,10],[4.5,0]]]],
    ["€",7,[[[7,9.4],[5,10],[1.5,8],[1.5,2],[5,0],[7,0.6]],[[0,4],[6,4]],[[0,6],[6,6]]]],
    ["£",7,[[[0,0],[2.8,1.2],[5,0],[7,1.0]],[[0,0],[3,3.8],[0,7],[1,10],[4.5,10],[6,8]],[[0,4],[5,4]]]],
    ["₿",5,[[[0,2],[0,8]],[[0,8],[5,8],[5,5],[0,5]],[[0,5],[5,5],[5,2],[0,2]],[[1,10],[1,8]],[[3,10],[3,8]],[[1,2],[1,0]],[[3,2],[3,0]]]],
    ["⁰",4,[[[2,10],[0,9.6],[0,5],[4,5],[4,9.6],[2,10]]]],
    ["¹",4,[[[1,5],[3,5]],[[2,5],[2,10]],[[2,10],[1,9]]]],
    ["²",4,[[[0,9],[0.7,10],[3.5,10],[4,8],[0,5]],[[0,5],[4,5]]]],
    ["³",4,[[[0,9.8],[4,10],[4,7.5],[1,7.5]],[[1,7.5],[4,7.5],[4,5],[0,5.2]]]],
    ["⁴",4,[[[3,10],[3,5]],[[3,10],[0,6]],[[0,6],[4,6]]]],
    ["⁵",4,[[[4,10],[0,10]],[[0,10],[0,7.8]],[[0,7.8],[4,7.8],[4,5],[0,5]]]],
    ["⁶",4,[[[3,10],[1,9],[0,7.8],[0,5],[4,5],[4,7.8],[0.5,7.8],[0.15,7.3]]]],
    ["⁷",4,[[[0,10],[4,10]],[[4,10],[1,5]]]],
    ["⁸",4,[[[2,7.5],[0,7.5],[0,10],[4,10],[4,7.5],[2,7.5]],[[2,7.5],[0,7.5],[0,5],[4,5],[4,7.5],[2,7.5]]]],
    ["⁹",4,[[[3.8,7.8],[3,7.4],[0,7.5],[0,10],[4,10],[4,5],[1,5]]]],
    ["⁻",4,[[[0,7.5],[4,7.5]]]],
    ["⁺",4,[[[0,7.5],[4,7.5]],[[2,5.5],[2,9.5]]]],
    ["⁽",2,[[[1.8,5],[0.2,6],[0.2,9],[1.8,10]]]],
    ["⁾",2,[[[0.2,5],[1.8,6],[1.8,9],[0.2,10]]]],
    ["₀",4,[[[2,5],[0,4.6],[0,0],[4,0],[4,4.6],[2,5]]]],
    ["₁",4,[[[1,0],[3,0]],[[2,0],[2,5]],[[2,5],[1,4]]]],
    ["₂",4,[[[0,4],[0.7,5],[3.5,5],[4,3],[0,0]],[[0,0],[4,0]]]],
    ["₃",4,[[[0,4.8],[4,5],[4,2.5],[1,2.5]],[[1,2.5],[4,2.5],[4,0],[0,0.2]]]],
    ["₄",4,[[[3,5],[3,0]],[[3,5],[0,1]],[[0,1],[4,1]]]],
    ["₅",4,[[[4,5],[0,5]],[[0,5],[0,2.8]],[[0,2.8],[4,2.8],[4,0],[0,0]]]],
    ["₆",4,[[[3,5],[1,4],[0,2.8],[0,0],[4,0],[4,2.8],[0.5,2.8],[0.15,2.3]]]],
    ["₇",4,[[[0,5],[4,5]],[[4,5],[1,0]]]],
    ["₈",4,[[[2,2.5],[0,2.5],[0,5],[4,5],[4,2.5],[2,2.5]],[[2,2.5],[0,2.5],[0,0],[4,0],[4,2.5],[2,2.5]]]],
    ["₉",4,[[[3.8,2.8],[3,2.4],[0,2.5],[0,5],[4,5],[4,0],[1,0]]]],
    ["₋",4,[[[0,2.5],[4,2.5]]]],
    ["₊",4,[[[0,2.5],[4,2.5]],[[2,0.5],[2,4.5]]]],
    ["₍",2,[[[1.8,0],[0.2,1],[0.2,4],[1.8,5]]]],
    ["₎",2,[[[0.2,0],[1.8,1],[1.8,4],[0.2,5]]]],
    ["α",7,[[[6.4,7],[3.6,0],[0,0],[0,6.2],[3.8,6.2],[5.2,1],[6,0],[7,0.5]]]],
    ["Ω",8,[[[0,0],[2.5,0],[2.5,0],[0,4],[0,8],[4,10],[8,8],[8,4],[5.5,0],[5.5,0],[8,0]]]],
    ["∞",8,[[[4,4],[3,5.6],[0.8,6],[0,4],[0.8,2],[3,2.4],[4,4],[5,5.6],[7.2,6],[8,4],[7.2,2],[5,2.4],[4,4]]]],
    ["µ",5,[[[0,0],[0,6]],[[0,6],[0,1.5],[3,1.5],[4,2.5]],[[4,6],[4,1.5],[4.5,1.2]]]],
    ["π",8,[[[1,0],[2,1],[2,5.8]],[[0,5],[1,6],[6.5,6],[7.5,7]],[[5.5,6],[5.5,1],[7,0],[8,1]]]],
    ["ε",6,[[[6,6],[4.5,7],[0,7],[0,3.5],[4,3.5]],[[4,3.5],[0,3.5],[0,0],[4.5,0],[6,1]]]],
    ["ß",6,[[[0,0],[0,10],[5,10],[5,6],[2,5],[6,4],[6,0],[3.5,0],[2,1]]]],
    ["∑",6,[[[6,10],[0,10]],[[0,10],[5,5]],[[5,5],[0,0]],[[0,0],[6,0]]]],
    ["√",9,[[[0,4],[2,4]],[[2,4],[4,0]],[[4,0],[6,10]],[[6,10],[9,10]]]],
    ["⌀",7,[[[0,0],[7,7]],[[3.5,0],[0,0.4],[0,7],[7,7],[7,0.4],[3.5,0]]]],
    ["×",6,[[[0,1],[6,7]],[[0,7],[6,1]]]],
    ["•",4,[[[2,3.5],[1.2,3.7],[1.2,5],[2.8,5],[2.8,3.7],[2,3.5]]]],
    ["☺",10,[[[5,0],[2.6,0.22],[0,3],[0,7],[3,10],[7,10],[10,7],[10,3],[7.4,0.22],[5,0]],[[2.5,4],[3.8,2.3],[6.2,2.3],[7.5,4]],[[3,6.5]],[[7,6.5]]]],
    ["☹",10,[[[5,0],[2.6,0.22],[0,3],[0,7],[3,10],[7,10],[10,7],[10,3],[7.4,0.22],[5,0]],[[2.5,3],[3.6,4.3],[6.4,4.3],[7.5,3]],[[3,6.5]],[[7,6.5]]]],
    ["…",6,[[[0,0]],[[3,0]],[[6,0]]]],
    ["æ",8,[[[0,7],[4,7],[4,0],[0,0],[0,3.5],[3.7,4.5]],[[4.2,3.5],[8,3.5]],[[8,3.5],[8,7],[4,7],[4,0],[8,0]]]],
    ["⌛",8,[[[4,0],[0,0],[0,1],[8,1],[8,0],[4,0]],[[4,10],[0,10],[0,9],[8,9],[8,10],[4,10]],[[1,10],[3.0,5],[1,1]],[[7,9],[5.0,5],[7,1]],[[4,6]],[[3,6]],[[5,6]],[[3.5,5]],[[4.5,5]],[[3.5,4]],[[4.5,4]],[[3.5,3]],[[4.5,3]],[[3.5,2]],[[4.5,2]],[[2.5,2]],[[5.5,2]],[[4,1]],[[3,1]],[[2,1]],[[5,1]],[[6,1]]]],
    ["→",7,[[[0,5],[7,5]],[[5,7],[7,5]],[[5,3],[7,5]]]],
    ["←",7,[[[0,5],[7,5]],[[0,5],[2,7]],[[0,5],[2,3]]]],
    ["↑",5,[[[2.5,1],[2.5,8.5]],[[2.5,8.5],[0.5,6.5]],[[2.5,8.5],[5,6.5]]]],
    ["↓",5,[[[2.5,1],[2.5,8.5]],[[2.5,1],[4.5,3]],[[2.5,1],[0.5,3]]]],
    ["»",8,[[[0,7.5],[4,5]],[[4,5],[0,2.5]],[[4,7.5],[8,5]],[[8,5],[4,2.5]]]],
    ["«",8,[[[0,5],[4,7.5]],[[0,5],[4,2.5]],[[4,5],[8,7.5]],[[4,5],[8,2.5]]]],
    // The balloon character below might not yet be visible.
    // Balloon: U+1F388
    ["🎈",7,[[[4,3],[6,5.5],[6,10],[0,10],[0,5.2],[4,3]],[[4,3],[3.5,2.5]],[[3.5,2.5],[4.5,2.5]],[[4.5,2.5],[4,3]],[[3.6,3],[4.4,3]],[[4,3],[4.2,1.2],[6,1.5],[7,0]]]],
    ["⇦",8,[[[0,5],[3,8]],[[0,5],[3,2]],[[1,6],[8,6]],[[1,4],[8,4]],[[8,4],[8,6]]]],
    ["⇨",8,[[[8,5],[5,8]],[[8,5],[5,2]],[[7,6],[0,6]],[[7,4],[0,4]],[[0,4],[0,6]]]],
    ["⇧",6,[[[3,9],[0,6]],[[3,9],[6,6]],[[4,8],[4,1]],[[2,8],[2,1]],[[2,1],[4,1]]]],
    ["⇩",6,[[[3,1],[0,4]],[[3,1],[6,4]],[[4,2],[4,9]],[[2,2],[2,9]],[[2,9],[4,9]]]],
  ]
];

// Other characters to add maybe:
//  🖒 👍 ✓ ✔ ✗ ✘ ♠ ♣ ♥ ♦ 
// Modifiers:   ˊ ˋ ˆ ˚ 
// Combining Diacritical Marks: ̀  ́  ̂  ̈  


// This is a font for a stencil.
// Only the definitions that are different.
// The default alphabet is the fallback.
subdivision_stencil_font =
[
  "Subdivision Stencil Font",
  [
    ["a",5,[[[0.5,6.5],[2,7],[4.5,6],[4,0.5],[5,0]],[[2.22,4],[0,4.5],[0,0],[2.35,1]]]],
    ["b",5,[[[0,0],[0.5,0.5],[0.5,10]],[[2.5,6.5],[5,7],[5,0],[2.5,0.5]]]],
    ["d",5,[[[5,0],[4.5,0.5],[4.5,10]],[[2.5,6.5],[0,7],[0,0],[2.5,0.5]]]],
    ["e",5,[[[5,1],[4,0],[0,0],[0,7],[4.6,7],[5,3.5]],[[5,3.5],[2.3,3.5]]]],
    ["g",5,[[[5,7],[5,0],[1,0]],[[2.95,6.8],[2.4,7],[0,7],[0,3.2],[2,2.8],[2.8,3.5]]]],
    ["o",5,[[[1.5,0],[0,0.4],[0,6.6],[1.5,7]],[[3.5,7],[5,6.6],[5,0.4],[3.5,0]]]],
    ["p",5,[[[0,0],[0,7]],[[2,6.5],[5,7],[5,2.5],[2,3]]]],
    ["q",5,[[[5,0],[5,7]],[[3,6.5],[0,7],[0,2.5],[3,3]]]],
    ["A",8,[[[0,0],[4,10]],[[4,10],[8,0]],[[3.2,3.2],[4.8,3.2]]]],
    ["B",6,[[[0,0],[0,10]],[[2,10],[5,10],[5,5],[2,5]],[[2,5],[6,5],[6,0],[2,0]]]],
    ["D",6,[[[0,0],[0,10]],[[2,10],[6,10],[6,0],[2,0]]]],
    ["O",7,[[[2.5,0],[1.4,0.2],[0,2],[0,8],[1.4,9.8],[2.5,10]],
            [[4.5,10],[5.6,9.8],[7,8],[7,2],[5.6,0.2],[4.5,0]]]],
    ["P",6,[[[0,0],[0,10]],[[2,10],[6,10],[6,5],[2,5]]]],
    ["Q",8,[[[2,1],[0,1.8],[0,10],[8,10],[8,2.8],[6.4,2.0]],[[3,2.6],[5,0],[8,0]]]],
    ["R",6,[[[0,0],[0,10]],[[2,10],[6,10],[6,5],[2,5]],[[2,5],[6,0]]]],
    ["0",7,[[[2.5,0],[1.2,0.4],[0,3],[0,7],[1.2,9.6],[2.5,10]],[[4.5,10],[5.8,9.6],[7,7],[7,3],[5.8,0.4],[4.5,0]]]],
    ["4",7,[[[7,3],[0,3]],[[0,3],[5,10]],[[5,6],[5,0]]]],
    ["6",6,[[[4,10],[1,7],[0,5],[0,0],[6,0],[6,5.5],[2.4,5.1]]]],
    ["8",7,[[[3.5,5.4],[0.6,5.7],[0.6,9.5],[2.5,10]],[[4.5,10],[6.4,9.5],[6.4,5.7],[3.5,5.4]],[[3.5,5.4],[0,5.0],[0,0.5],[2.5,0]],[[4.5,0],[7,0.5],[7,5.0],[3.5,5.4]]]],
    ["9",6,[[[2,0],[3.5,1.2],[6,5],[6,10],[0,10],[0,5],[3.0,4.8],[3.5,5.4]]]],
    ["♥",10,[[[5,0],[3,3],[0,5.2],[0,10],[3.4,10],[4,8]],[[6,8],[6.6,10],[10,10],[10,5.2],[7,3],[5,0]]]],
    // The stencil '&' sign can be made in different ways.
    // ["&",7,[[[7,0],[3.6,3.2]],[[0.8,6.2],[0,7.6],[1,10],[5.5,10],[5.5,6],[0,4],[0,0],[4,0],[7,3]]]],
    ["&",7,[[[7,0],[1,6],[1,10],[5.5,10],[5.5,7],[4.2,6.1]],[[0.9,3.7],[0,2.8],[0,0],[4,0],[7,3]]]],
    ["@",8,[[[5.9,3.6],[3.1,3],[3.1,7],[5.8,6.5]],[[8,2.5],[8,8],[6,10],[0,10],[0,0],[7,0]]]],
  ]
];

// This is a font with a more "classic" serif look and feel.
// Only the definitions that are different.
// The default alphabet is the fallback.
subdivision_classic_font =
[
  "Subdivision Classic Font",
  [
    ["A",10,[[[0,0],[2,0]],[[1,0],[5,10]],[[5,10],[9,0]],[[2.4,3.4],[7.6,3.4]],[[8,0],[10,0]]]],
    ["B",7,[[[1,0],[1,10]],[[0,10],[6,10],[6,5],[1,5]],[[1,5],[7,5],[7,0],[0,0]]]],
    ["C",6,[[[6,1],[5,0],[0,0],[0,10],[5,10],[6,9]],[[6,10],[6,8.5]],[[6,0],[6,1.5]]]],
    ["D",7,[[[1,0],[1,10]],[[0,10],[7,10],[7,0],[0,0]]]],
    ["E",6,[[[1,0],[1,10]],[[0,10],[6,10]],[[1,5],[5,5]],[[0,0],[6,0]],[[5,4.2],[5,5.8]],[[6,10],[6,9]],[[6,0],[6,1]]]],
    ["F",6,[[[1,0],[1,10]],[[0,10],[6,10]],[[1,5],[5,5]],[[5,4.2],[5,5.8]],[[0,0],[2,0]],[[6,10],[6,9]]]],
    ["G",8,[[[7,8],[6,10],[0,10],[0,0],[6,0],[7,4]],[[5,4],[8,4]]]],
    ["H",8,[[[1,0],[1,10]],[[7,0],[7,10]],[[1,5],[7,5]],[[0,0],[2,0]],[[6,0],[8,0]],[[0,10],[2,10]],[[6,10],[8,10]]]],
    ["I",2,[[[1,0],[1,10]],[[0,10],[2,10]],[[0,0],[2,0]]]],
    ["J",6,[[[5,10],[5,2.5],[4.8,1],[4,0],[1,0],[0.2,1],[0,2.5]],[[4,10],[6,10]]]],
    ["K",8,[[[1,0],[1,10]],[[1,4],[7,10]],[[2.5,5.4],[7,0]],[[0,0],[2,0]],[[0,10],[2,10]],[[6,10],[8,10]],[[6,0],[8,0]]]],
    ["L",7,[[[1,10],[1,0]],[[0,0],[7,0]],[[7,0],[7,1]],[[0,10],[2,10]]]],
    ["M",9,[[[1,0],[1,10]],[[1,10],[4,5]],[[4,5],[8,10]],[[8,10],[8,0]],[[0,0],[2,0]],[[7,0],[9,0]],[[0,10],[1,10]],[[8,10],[9,10]]]],
    ["N",8,[[[1,0],[1,10]],[[1,10],[7,0]],[[7,0],[7,10]],[[0,0],[2,0]],[[7,0],[8,0]],[[0,10],[1,10]],[[6,10],[8,10]]]],
    ["O",7,[[[3.5,0],[1.5,0],[0,2],[0,8],[1.5,10],[5.5,10],[7,8],[7,2],[5.5,0],[3.5,0]]]],
    ["P",6.5,[[[1,0],[1,10]],[[0,10],[6.5,10],[6.5,5],[1,5]],[[0,0],[2,0]]]],
    ["Q",8,[[[4,1],[0,1.6],[0,10],[8,10],[8,1.6],[4,1]],[[3,2.6],[5,0],[8,0]]]],
    ["R",7,[[[1,0],[1,10]],[[0,10],[6,10],[6,5],[1,5]],[[1,5],[6,0]],[[0,0],[2,0]],[[5,0],[7,0]]]],
    ["S",7,[[[7,9],[5.5,10],[0,10],[0,5],[7,5],[7,0],[1.5,0],[0,1]],[[7,10],[7,8]],[[0,0],[0,2]]]],
    ["T",7,[[[0,10],[7,10]],[[3.5,10],[3.5,0]],[[0,10],[0,9]],[[7,10],[7,9]],[[2.5,0],[4.5,0]]]],
    ["U",8,[[[1,10],[1,1],[2,0],[6,0],[7,1],[7,10]],[[0,10],[2,10]],[[6,10],[8,10]]]],
    ["V",9,[[[1,10],[4.5,0]],[[4.5,0],[8,10]],[[0,10],[2,10]],[[7,10],[9,10]]]],
    ["W",12,[[[1,10],[3.5,0]],[[3.5,0],[6,6]],[[6,6],[8.5,0]],[[8.5,0],[11,10]],[[0,10],[2,10]],[[10,10],[12,10]]]],
    ["X",8,[[[1,10],[7,0]],[[1,0],[7,10]],[[0,10],[2,10]],[[0,0],[2,0]],[[6,10],[8,10]],[[6,0],[8,0]]]],
    ["Y",8,[[[1,10],[4,5]],[[4,5],[7,10]],[[4,5],[4,0]],[[3,0],[5,0]],[[0,10],[2,10]],[[6,10],[8,10]]]],
    ["Z",7,[[[0,10],[7,10]],[[7,10],[0,0]],[[0,0],[7,0]],[[0,10],[0,9]],[[7,0],[7,1]]]],
  ]
];

// This is "handwriting" font.
// Only the definitions that are different.
// The default alphabet is the fallback.
subdivision_handwriting_font =
[
  "Subdivision Handwriting Font",
  [
    ["a",5,[[[0.5,6.5],[2,7],[4.5,6],[4,0.5],[5,0]],[[4.05,4],[0,4.5],[0,0],[4.2,1],[6,4]]]],
  ]
];

font_list =
[
  subdivision_font,
  subdivision_stencil_font,
  subdivision_classic_font,
  subdivision_handwriting_font
];


// FontDesigner
// ------------
//
// A module to help designing the font.
module FontDesigner(font="Subdivision Font",weight=1,slanting=0,method="1path",smooth=2)
{
  // Find the font of the name.
  // To do: make assert() when font name is not found.
  for(i=[0:len(font_list)-1])
  {
    if(font_list[i][0] == font)
    {
      // Point to the definitions of the characters.
      font_definition = font_list[i][1];

      // Title and settings
      color("Teal")
      {
        y_offset = 10;
        t_size = 6;
        translate([0,5*y_offset])
          text(font,size=1.5*t_size);
        translate([0,4*y_offset])
          text("By: Stone Age Sculptor",size=t_size);
        translate([0,3*y_offset])
          text("License: CC0 (Public Domain)",size=t_size);
        translate([0,2*y_offset])
          text(str("method = \"", method, "\""),size=t_size);
        translate([0,1*y_offset])
          text(str("divisions = ", smooth),size=t_size);
      }

      // x-axis with columns
      color("Navy")
      {
        square([138,0.5]);

        for(i=[0:9])
          translate([8+i*14,2])
            text(str(i),size=3.5,halign="center");
      }

      for(i=[0:len(font_definition)-1])
      {
        column = (i) % 10;
        row = floor((i) / 10);

        // Show a part of the y-axis with rows.
        if(column==0)
        {
          color("Navy")
          {
            translate([-0.5,-14.5-row*14])
              square([0.5,15]);

            translate([-5,-10-row*14])
              text(str(row),size=3.5,halign="center");
          }
        }

        // A gray square below the character.
        translate([4+column*14,-13-row*14])
        {
          // show the size as a faint rectangle.
          if($preview)
          {
            xpos = -weight/2;
            ypos = -weight/2;
            xsize = font_definition[i][1] + weight;
            ysize = 10 + weight;
            translate([0,0,-1.1])
              color("Gray",0.1)
                translate([xpos,ypos])
                  square([xsize,ysize]);
          }

          if(len(font_definition[i][2]) > 0)  // are there any points?
          {
            for(j=[0:len(font_definition[i][2])-1])
            {
              // show the controlpoints in Red
              if($preview)
                color("Red")
                  for(k=[0:len(font_definition[i][2][j])-1])
                    translate(font_definition[i][2][j][k])
                      circle(0.3);

              path = Subdivision(font_definition[i][2][j],smooth,method=method);

              color("Blue",0.25)
              {
                if(len(path) == 1)
                {
                  y = path[0].y;
                  x = path[0].x + slanting * y;
                  translate([x,y])
                    circle(d=weight,$fn=12);
                }
                else
                {
                  for(k=[0:len(path)-2])
                  {
                    y1 = path[k].y;
                    x1 = path[k].x + slanting * y1;
                    y2 = path[k+1].y;
                    x2 = path[k+1].x + slanting * y2;

                    hull()
                    {
                      translate([x1,y1])
                        circle(d=weight,$fn=12);
                      translate([x2,y2])
                        circle(d=weight,$fn=12);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
